
Forno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7b  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a6  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ea  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  00001fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define ACESO   0
#define APAGADO 1
int main( )
{
	//Configuração Saída Digital
	Gpio__PinConfig(PORT_B,LED2,OUTPUT_DIGITAL);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	64 e0       	ldi	r22, 0x04	; 4
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 78 00 	call	0xf0	; 0xf0 <Gpio__PinConfig>
	
	//Configuração Entrada Digital
	Gpio__PinConfig(PORT_C, SW1, INPUT_DIGITAL_PULLUP);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 78 00 	call	0xf0	; 0xf0 <Gpio__PinConfig>
	//Variável SW1
	int Button; 	

	while(1) 
	{
		Button = Gpio__PinRead(PORT_C,SW1);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 c9 00 	call	0x192	; 0x192 <Gpio__PinRead>
		
		if(Button == ON)	
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	d1 f7       	brne	.-12     	; 0xaa <main+0x14>
		{	
			Gpio__PinWrite(PORT_B,LED2,ACESO);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 9f 00 	call	0x13e	; 0x13e <Gpio__PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x30>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3a>
  d0:	00 00       	nop
			_delay_ms(1000);
			Gpio__PinWrite(PORT_B,LED2,APAGADO);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	64 e0       	ldi	r22, 0x04	; 4
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 9f 00 	call	0x13e	; 0x13e <Gpio__PinWrite>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x4c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x56>
  ec:	00 00       	nop
  ee:	dd cf       	rjmp	.-70     	; 0xaa <main+0x14>

000000f0 <Gpio__PinConfig>:
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	db 01       	movw	r26, r22
  f4:	a2 5f       	subi	r26, 0xF2	; 242
  f6:	be 4f       	sbci	r27, 0xFE	; 254
  f8:	2c 91       	ld	r18, X
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	39 f0       	breq	.+14     	; 0x10c <Gpio__PinConfig+0x1c>
  fe:	18 f0       	brcs	.+6      	; 0x106 <Gpio__PinConfig+0x16>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	39 f0       	breq	.+14     	; 0x112 <Gpio__PinConfig+0x22>
 104:	08 c0       	rjmp	.+16     	; 0x116 <Gpio__PinConfig+0x26>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 106:	e3 e2       	ldi	r30, 0x23	; 35
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	05 c0       	rjmp	.+10     	; 0x116 <Gpio__PinConfig+0x26>
		break;
	case	PORT_C:
		pt_data = PORTC;
 10c:	e6 e2       	ldi	r30, 0x26	; 38
 10e:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 110:	02 c0       	rjmp	.+4      	; 0x116 <Gpio__PinConfig+0x26>
	case	PORT_D:
		pt_data = PORTD;
 112:	e9 e2       	ldi	r30, 0x29	; 41
 114:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	default:
		break;
	}
	
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	21 f4       	brne	.+8      	; 0x122 <Gpio__PinConfig+0x32>
{
	//pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 11a:	81 81       	ldd	r24, Z+1	; 0x01
 11c:	82 2b       	or	r24, r18
 11e:	81 83       	std	Z+1, r24	; 0x01
 120:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 122:	41 11       	cpse	r20, r1
 124:	0b c0       	rjmp	.+22     	; 0x13c <Gpio__PinConfig+0x4c>
{
	//pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 126:	81 81       	ldd	r24, Z+1	; 0x01
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 128:	db 01       	movw	r26, r22
 12a:	aa 5f       	subi	r26, 0xFA	; 250
 12c:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	//pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 12e:	9c 91       	ld	r25, X
 130:	98 23       	and	r25, r24
 132:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 134:	92 81       	ldd	r25, Z+2	; 0x02
 136:	82 2f       	mov	r24, r18
 138:	89 2b       	or	r24, r25
 13a:	82 83       	std	Z+2, r24	; 0x02
 13c:	08 95       	ret

0000013e <Gpio__PinWrite>:
 */
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 13e:	41 11       	cpse	r20, r1
 140:	14 c0       	rjmp	.+40     	; 0x16a <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	a0 81       	ld	r26, Z
 150:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 152:	12 96       	adiw	r26, 0x02	; 2
 154:	9c 91       	ld	r25, X
 156:	12 97       	sbiw	r26, 0x02	; 2
 158:	e6 2f       	mov	r30, r22
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ea 5f       	subi	r30, 0xFA	; 250
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	80 81       	ld	r24, Z
 162:	89 23       	and	r24, r25
 164:	12 96       	adiw	r26, 0x02	; 2
 166:	8c 93       	st	X, r24
 168:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	a0 81       	ld	r26, Z
 178:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 17a:	12 96       	adiw	r26, 0x02	; 2
 17c:	9c 91       	ld	r25, X
 17e:	12 97       	sbiw	r26, 0x02	; 2
 180:	e6 2f       	mov	r30, r22
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e2 5f       	subi	r30, 0xF2	; 242
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	89 2b       	or	r24, r25
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	8c 93       	st	X, r24
 190:	08 95       	ret

00000192 <Gpio__PinRead>:
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = OFF;       // pin_state = 0x00  acionado  
	
		
	
    	pt_data = GPIO_DATA_LIST[port];
 192:	e8 2f       	mov	r30, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e0 50       	subi	r30, 0x00	; 0
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	01 90       	ld	r0, Z+
 1a0:	f0 81       	ld	r31, Z
 1a2:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 1a4:	90 81       	ld	r25, Z
 1a6:	e6 2f       	mov	r30, r22
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e2 5f       	subi	r30, 0xF2	; 242
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
        {
    		pin_state = ON;     // pin_state = 0x01   não acionado
        }
   
    return (pin_state);
 1ae:	80 81       	ld	r24, Z
 1b0:	98 23       	and	r25, r24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <Gpio__PinRead+0x26>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
    
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
