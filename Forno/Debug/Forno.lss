
Forno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800124  00800124  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001065  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acb  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067b  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fb  00000000  00000000  00002dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000031be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
Hal__Initialize();
  a6:	0e 94 1e 01 	call	0x23c	; 0x23c <Hal__Initialize>
Hal__SetAllLeds(APAGADO);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 4d 01 	call	0x29a	; 0x29a <Hal__SetAllLeds>
  b0:	08 95       	ret

000000b2 <Appl__Handler>:
// PODE-SE FAZER ESTE TESTE DE DUAS FORMAS: LER CADA BOTÃO OU LER TODOS DE UMA VEZ!!!


//1) LER UMA DE CADA VEZ
void Appl__Handler(void)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29

KEYS_READ * value = Hal__ReadAllKey();
  b6:	0e 94 66 01 	call	0x2cc	; 0x2cc <Hal__ReadAllKey>
  ba:	ec 01       	movw	r28, r24


if (value->key[0]== ON && value->key[2]== ON)
  bc:	88 81       	ld	r24, Y
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	d9 f4       	brne	.+54     	; 0xf8 <Appl__Handler+0x46>
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	61 f4       	brne	.+24     	; 0xe0 <Appl__Handler+0x2e>
  {
  Hal__SetAllLeds(APAGADO);
  c8:	0e 94 4d 01 	call	0x29a	; 0x29a <Hal__SetAllLeds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <Appl__Handler+0x20>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Appl__Handler+0x2a>
  dc:	00 00       	nop
  de:	2a c0       	rjmp	.+84     	; 0x134 <Appl__Handler+0x82>
  }
else
  {
  if(value->key[0] == ON)    //reads key 1 (at SW1)
	{
	Hal__SetLed(LED_0,ACESO);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
	Hal__SetLed(LED_1,APAGADO);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
	Hal__SetLed(LED_2,APAGADO);	  
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
	}
 if(value->key[1] == ON)           //reads key 2 (at SW2)
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	61 f4       	brne	.+24     	; 0x116 <Appl__Handler+0x64>
	{
    Hal__SetLed(LED_0,ACESO);	 
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
    Hal__SetLed(LED_1,ACESO);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
    Hal__SetLed(LED_2,APAGADO);		 
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
    }
if(value->key[2] == ON)   //reads key 3 (at SW3)
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	61 f4       	brne	.+24     	; 0x134 <Appl__Handler+0x82>
	{
	Hal__SetLed(LED_0,ACESO);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
	Hal__SetLed(LED_1,ACESO);  
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
	Hal__SetLed(LED_2,ACESO);	  
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 41 01 	call	0x282	; 0x282 <Hal__SetLed>
	}
 }
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <main>:
//=====================================================================================================================

void main(void)
{
	
	Slot = SLOT_1;
 13a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
	
	// Functions Initialization
	INITIALIZE_TASKS();
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>
			Slot = SLOT_1;
			break;

		}

		Slot++;
 142:	c1 e0       	ldi	r28, 0x01	; 1
	
	//Main Loop
	for(;;)
	{
		
		switch(Slot)
 144:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 148:	88 23       	and	r24, r24
 14a:	19 f0       	breq	.+6      	; 0x152 <main+0x18>
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	20 f4       	brcc	.+8      	; 0x158 <main+0x1e>
 150:	06 c0       	rjmp	.+12     	; 0x15e <main+0x24>
		{
			case SLOT_1:
			SLOT_1_TASKS();
 152:	0e 94 59 00 	call	0xb2	; 0xb2 <Appl__Handler>
			break;
 156:	03 c0       	rjmp	.+6      	; 0x15e <main+0x24>
			Slot = SLOT_1;
			break;

		}

		Slot++;
 158:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <__data_end>
 15c:	f3 cf       	rjmp	.-26     	; 0x144 <main+0xa>
 15e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
		if(Slot >= NUM_OF_MAIN_SLOTS)
 168:	85 30       	cpi	r24, 0x05	; 5
 16a:	60 f3       	brcs	.-40     	; 0x144 <main+0xa>
		{
			Slot = SLOT_1;
 16c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 170:	e9 cf       	rjmp	.-46     	; 0x144 <main+0xa>

00000172 <Gpio__PinConfig>:
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	db 01       	movw	r26, r22
 176:	a4 5e       	subi	r26, 0xE4	; 228
 178:	be 4f       	sbci	r27, 0xFE	; 254
 17a:	2c 91       	ld	r18, X
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	39 f0       	breq	.+14     	; 0x18e <Gpio__PinConfig+0x1c>
 180:	18 f0       	brcs	.+6      	; 0x188 <Gpio__PinConfig+0x16>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	39 f0       	breq	.+14     	; 0x194 <Gpio__PinConfig+0x22>
 186:	08 c0       	rjmp	.+16     	; 0x198 <Gpio__PinConfig+0x26>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 188:	e3 e2       	ldi	r30, 0x23	; 35
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	05 c0       	rjmp	.+10     	; 0x198 <Gpio__PinConfig+0x26>
		break;
	case	PORT_C:
		pt_data = PORTC;
 18e:	e6 e2       	ldi	r30, 0x26	; 38
 190:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 192:	02 c0       	rjmp	.+4      	; 0x198 <Gpio__PinConfig+0x26>
	case	PORT_D:
		pt_data = PORTD;
 194:	e9 e2       	ldi	r30, 0x29	; 41
 196:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	default:
		break;
	}
	
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	21 f4       	brne	.+8      	; 0x1a4 <Gpio__PinConfig+0x32>
{
	//pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 19c:	81 81       	ldd	r24, Z+1	; 0x01
 19e:	82 2b       	or	r24, r18
 1a0:	81 83       	std	Z+1, r24	; 0x01
 1a2:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 1a4:	41 11       	cpse	r20, r1
 1a6:	0b c0       	rjmp	.+22     	; 0x1be <Gpio__PinConfig+0x4c>
{
	//pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 1a8:	81 81       	ldd	r24, Z+1	; 0x01
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 1aa:	db 01       	movw	r26, r22
 1ac:	ac 5e       	subi	r26, 0xEC	; 236
 1ae:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	//pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 1b0:	9c 91       	ld	r25, X
 1b2:	98 23       	and	r25, r24
 1b4:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 1b6:	92 81       	ldd	r25, Z+2	; 0x02
 1b8:	82 2f       	mov	r24, r18
 1ba:	89 2b       	or	r24, r25
 1bc:	82 83       	std	Z+2, r24	; 0x02
 1be:	08 95       	ret

000001c0 <Gpio__PinWrite>:
 */
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 1c0:	41 11       	cpse	r20, r1
 1c2:	14 c0       	rjmp	.+40     	; 0x1ec <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 1c4:	e8 2f       	mov	r30, r24
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	e0 50       	subi	r30, 0x00	; 0
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	a0 81       	ld	r26, Z
 1d2:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 1d4:	12 96       	adiw	r26, 0x02	; 2
 1d6:	9c 91       	ld	r25, X
 1d8:	12 97       	sbiw	r26, 0x02	; 2
 1da:	e6 2f       	mov	r30, r22
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ec 5e       	subi	r30, 0xEC	; 236
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	80 81       	ld	r24, Z
 1e4:	89 23       	and	r24, r25
 1e6:	12 96       	adiw	r26, 0x02	; 2
 1e8:	8c 93       	st	X, r24
 1ea:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 1ec:	e8 2f       	mov	r30, r24
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e0 50       	subi	r30, 0x00	; 0
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	a0 81       	ld	r26, Z
 1fa:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 1fc:	12 96       	adiw	r26, 0x02	; 2
 1fe:	9c 91       	ld	r25, X
 200:	12 97       	sbiw	r26, 0x02	; 2
 202:	e6 2f       	mov	r30, r22
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e4 5e       	subi	r30, 0xE4	; 228
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	80 81       	ld	r24, Z
 20c:	89 2b       	or	r24, r25
 20e:	12 96       	adiw	r26, 0x02	; 2
 210:	8c 93       	st	X, r24
 212:	08 95       	ret

00000214 <Gpio__PinRead>:
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = ON;       // pin_state = 0x00  acionado  
	
		
	
    	pt_data = GPIO_DATA_LIST[port];
 214:	e8 2f       	mov	r30, r24
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	01 90       	ld	r0, Z+
 222:	f0 81       	ld	r31, Z
 224:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 226:	90 81       	ld	r25, Z
 228:	e6 2f       	mov	r30, r22
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	e4 5e       	subi	r30, 0xE4	; 228
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
        {
    		pin_state = OFF;     // pin_state = 0x01   não acionado
        }
   
    return (pin_state);
 230:	80 81       	ld	r24, Z
 232:	98 23       	and	r25, r24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	09 f0       	breq	.+2      	; 0x23a <Gpio__PinRead+0x26>
 238:	80 e0       	ldi	r24, 0x00	; 0
    
 23a:	08 95       	ret

0000023c <Hal__Initialize>:
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
unsigned char value;
value = Gpio__PinRead(KEYS_GPIO[key].port, KEYS_GPIO[key].pin);
return (value);
}
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cc e0       	ldi	r28, 0x0C	; 12
 246:	d1 e0       	ldi	r29, 0x01	; 1
 248:	04 e1       	ldi	r16, 0x14	; 20
 24a:	11 e0       	ldi	r17, 0x01	; 1
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	69 81       	ldd	r22, Y+1	; 0x01
 250:	88 81       	ld	r24, Y
 252:	0e 94 b9 00 	call	0x172	; 0x172 <Gpio__PinConfig>
 256:	22 96       	adiw	r28, 0x02	; 2
 258:	c0 17       	cp	r28, r16
 25a:	d1 07       	cpc	r29, r17
 25c:	b9 f7       	brne	.-18     	; 0x24c <Hal__Initialize+0x10>
 25e:	c6 e0       	ldi	r28, 0x06	; 6
 260:	d1 e0       	ldi	r29, 0x01	; 1
 262:	0c e0       	ldi	r16, 0x0C	; 12
 264:	11 e0       	ldi	r17, 0x01	; 1
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	69 81       	ldd	r22, Y+1	; 0x01
 26a:	88 81       	ld	r24, Y
 26c:	0e 94 b9 00 	call	0x172	; 0x172 <Gpio__PinConfig>
 270:	22 96       	adiw	r28, 0x02	; 2
 272:	c0 17       	cp	r28, r16
 274:	d1 07       	cpc	r29, r17
 276:	b9 f7       	brne	.-18     	; 0x266 <Hal__Initialize+0x2a>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <Hal__SetLed>:
 282:	46 2f       	mov	r20, r22
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	e4 5f       	subi	r30, 0xF4	; 244
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	61 81       	ldd	r22, Z+1	; 0x01
 292:	80 81       	ld	r24, Z
 294:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Gpio__PinWrite>
 298:	08 95       	ret

0000029a <Hal__SetAllLeds>:
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	f8 2e       	mov	r15, r24
 2a6:	cc e0       	ldi	r28, 0x0C	; 12
 2a8:	d1 e0       	ldi	r29, 0x01	; 1
 2aa:	04 e1       	ldi	r16, 0x14	; 20
 2ac:	11 e0       	ldi	r17, 0x01	; 1
 2ae:	4f 2d       	mov	r20, r15
 2b0:	69 81       	ldd	r22, Y+1	; 0x01
 2b2:	88 81       	ld	r24, Y
 2b4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Gpio__PinWrite>
 2b8:	22 96       	adiw	r28, 0x02	; 2
 2ba:	c0 17       	cp	r28, r16
 2bc:	d1 07       	cpc	r29, r17
 2be:	b9 f7       	brne	.-18     	; 0x2ae <Hal__SetAllLeds+0x14>
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	08 95       	ret

000002cc <Hal__ReadAllKey>:
 *  Use this function to read the status of all keys
 *  *  return: retorno o ponteiro da estrutura com os vetores das chaves*/


KEYS_READ* Hal__ReadAllKey(void)
{
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
	KEY_INPUT_TYPE index;
	// limpa a tab 
	for (index = 0; index < NUM_OF_KEYS; index++)
		tab.key[index] = 0xff;
 2d8:	e5 e2       	ldi	r30, 0x25	; 37
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	80 83       	st	Z, r24
 2e0:	81 83       	std	Z+1, r24	; 0x01
 2e2:	82 83       	std	Z+2, r24	; 0x02
 2e4:	c6 e0       	ldi	r28, 0x06	; 6
 2e6:	d1 e0       	ldi	r29, 0x01	; 1
 2e8:	8f 01       	movw	r16, r30
 2ea:	0f 2e       	mov	r0, r31
 2ec:	fc e0       	ldi	r31, 0x0C	; 12
 2ee:	ef 2e       	mov	r14, r31
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	ff 2e       	mov	r15, r31
 2f4:	f0 2d       	mov	r31, r0
		
	
	for (index = 0; index < NUM_OF_KEYS; index++)
			tab.key[index] = Gpio__PinRead(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
 2f6:	69 81       	ldd	r22, Y+1	; 0x01
 2f8:	88 81       	ld	r24, Y
 2fa:	0e 94 0a 01 	call	0x214	; 0x214 <Gpio__PinRead>
 2fe:	f8 01       	movw	r30, r16
 300:	81 93       	st	Z+, r24
 302:	8f 01       	movw	r16, r30
 304:	22 96       	adiw	r28, 0x02	; 2
	// limpa a tab 
	for (index = 0; index < NUM_OF_KEYS; index++)
		tab.key[index] = 0xff;
		
	
	for (index = 0; index < NUM_OF_KEYS; index++)
 306:	ce 15       	cp	r28, r14
 308:	df 05       	cpc	r29, r15
 30a:	a9 f7       	brne	.-22     	; 0x2f6 <Hal__ReadAllKey+0x2a>
			tab.key[index] = Gpio__PinRead(KEYS_GPIO[index].port, KEYS_GPIO[index].pin);
	return (&tab);
 30c:	85 e2       	ldi	r24, 0x25	; 37
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
